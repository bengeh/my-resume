{"version":3,"sources":["components/PersonalProfileContent.tsx","types/GitHubTypes.ts","effects/GitHubEffects.ts","actions/GitHubAction.ts","components/GitHubGraph.tsx","types/LeetCodeTypes.ts","effects/LeetCodeEffects.ts","actions/LeetCodeAction.ts","components/LeetCodeGraph.tsx","components/SummaryContent.tsx","components/ExperienceContent.tsx","assets/go.svg","components/SkillsList.tsx","assets/javascript.svg","assets/typescript.svg","assets/python.svg","assets/java.svg","assets/html5.svg","App.tsx","reportWebVitals.ts","reducer/LeetCodeReducer.ts","reducer/GitHubReducer.ts","reducer/index.ts","store/index.ts","index.tsx"],"names":["PersonalProfileContentContainer","styled","div","PersonalProfileTitle","PersonalProfileDesc","PersonalProfileContent","GET_GIT_HUB_DATA","getGitHubData","dispatch","fetch","method","then","res","json","data","console","log","type","payload","ChartWrapper","GitHubGraph","chartData","useDispatch","languageDataSet","languageDataNumber","gitHubData","useSelector","state","k","useEffect","push","labels","datasets","backgroundColor","isLoading","options","title","display","text","fontSize","legend","position","GET_LEET_CODE_DATA","getLeetCodeData","LeetCodeGraph","useState","leetCodeData","label","easyQns","medQns","hardQns","summary","desc","currentLevel","SummaryContainerWrapper","SummaryContentContainer","Summary","SummaryBar","props","SummaryContent","map","jobScope","roleTitle","rolePos","date","jobDesc","educationScope","schoolName","projects","ExperienceContentUL","ul","ExperienceContentWrapper","ExperienceContentTitle","ExperienceContentContainer","ExperienceContentRolesPos","ExperienceContentRolesPosContainer","ExperienceContentDate","ExperienceContentRolesTitle","ExperienceContent","v","skills","Go","SkillWrapperImg","img","SkillWrapperText","span","SkillWrapper","SkillListWrapper","SkillListTitle","SkillListContainer","SkillsList","className","src","alt","name","ContainerBreaker","hr","MainPage","LeftContainer","RightContainer","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialStateGetLeetCodeData","numSolved","initialStateGetGitHubData","rootReducer","combineReducers","action","langaugeMap","language","store","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0df998c6.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components'\n\n\nconst PersonalProfileContent = () => {\n    return(\n        <PersonalProfileContentContainer>\n            <PersonalProfileTitle>PERSONAL PROFILE</PersonalProfileTitle>\n            <PersonalProfileDesc>I am a dedicated and hardworking person. I have gone over to Silicon Valley as a software engineer intern and have used that\n                time to learn to develop web applications with the industries' best practices. I have also used EmberJS and React with Typescript to create\n                large scale applications for Standard Chartered Bank. I enjoy looking for new challenges and tackling and solving them. I am currently looking for new opportunities\n                to utilise my skills in a new challenging working environment\n            </PersonalProfileDesc>\n        </PersonalProfileContentContainer>\n    )\n}\n\nconst PersonalProfileContentContainer = styled.div`\n    display: flex;\n    flex-direction: row\n`\nconst PersonalProfileTitle = styled.div`\n    white-space: nowrap;\n    font-weight: bold;\n    @media(min-width: 1024px) {\n        width: 25%;\n    }\n`\nconst PersonalProfileDesc = styled.div`\n    padding: 0 0 0 25px;\n    @media(min-width: 1024px) {\n        padding: 0 0 0 50px;\n    }\n`\n\n\nexport default PersonalProfileContent","import { GitHub } from '../interfaces/GitHub';\n\nexport const GET_GIT_HUB_DATA = 'GET_GIT_HUB_DATA';\n\nexport interface GetGitHubStateType {\n  gitHubData: GitHub[];\n  isLoading: Boolean;\n}\n\ninterface GetGitHubActionType {\n  type: typeof GET_GIT_HUB_DATA;\n  payload: GitHub[];\n}\nexport type GitHubActionType = GetGitHubActionType;","import { getGitHubDataAction } from '../actions/GitHubAction';\nimport { Dispatch } from 'redux';\nimport { GitHubActionType } from '../types/GitHubTypes';\n\n\nexport const getGitHubData = () => {\n  return function (dispatch: Dispatch<GitHubActionType>) {\n    //   console.log(data)\n    //   dispatch(getGitHubDataAction(data))\n    // return data;\n    const POST_URL = 'https://api.github.com/users/bengeh/repos ';\n    fetch(POST_URL, {\n      method: 'GET'\n    })\n      .then(res => res.json())\n      .then(data => {\n        console.log(\"This is the data....\")\n        console.log(data)\n        dispatch(getGitHubDataAction(data));\n        return data;\n      });\n  };\n};","import { GET_GIT_HUB_DATA, GitHubActionType } from '../types/GitHubTypes';\nimport { GitHub } from '../interfaces/GitHub';\n\nexport const getGitHubDataAction = (gitHubData: GitHub[]): GitHubActionType => {\n  return {\n    type: GET_GIT_HUB_DATA,\n    payload: gitHubData\n  };\n};","import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getGitHubData } from '../effects/GitHubEffects';\nimport { AppState } from '../store';\nimport { Doughnut } from 'react-chartjs-2';\n\n\nconst GitHubGraph = () => {\n    const dispatch = useDispatch();\n    let languageDataSet: Array<String> = []\n    let languageDataNumber: any = []\n    let chartData: any = []\n    const gitHubData = useSelector((state: AppState) => state.gitHubData);\n    console.log(\"this the github data...\")\n    console.log(gitHubData)\n    useEffect(() => {\n        dispatch(getGitHubData());\n    }, [dispatch]);\n    for (let k in gitHubData.gitHubData){\n        languageDataSet.push(k)\n        languageDataNumber.push(gitHubData.gitHubData[k])\n    }\n    console.log(\"setting chart data...\")\n    console.log(languageDataNumber)\n    chartData = {\n        labels: languageDataSet,\n        datasets: [{\n            data: languageDataNumber,\n            backgroundColor: [\n                '#B21F00',\n                '#C9DE00',\n                '#2FDE00',\n                '#CCFFCC',\n                '#FF3399',\n                '#0080FF',\n                '#FF6666'\n            ]\n        }]\n    }\n    console.log(\"this the chart data...\")\n    console.log(chartData)\n    return(\n        <ChartWrapper>\n            {\n                !gitHubData.isLoading ? <Doughnut data={chartData} options={{\n                title:{\n                display:true,\n                text:'Git Hub Info',\n                fontSize:20\n                },\n                legend:{\n                    display:true,\n                    position:'top'\n                  }\n            }}/> : <>SPINNER</>\n        }\n        </ChartWrapper>\n    )\n}\n\nconst ChartWrapper = styled.div`\n    height: 250px;\n`;\n\nexport default GitHubGraph","import { LeetCode } from '../interfaces/LeetCode';\n\nexport const GET_LEET_CODE_DATA = 'GET_LEET_CODE_DATA';\n\nexport interface GetLeetCodeStateType {\n  leetCodeData: LeetCode;\n}\n\ninterface GetLeetCodeActionType {\n  type: typeof GET_LEET_CODE_DATA;\n  payload: LeetCode;\n}\nexport type LeetCodeActionType = GetLeetCodeActionType;","import { getLeetCodeDataAction } from '../actions/LeetCodeAction';\nimport { Dispatch } from 'redux';\nimport { LeetCodeActionType } from '../types/LeetCodeTypes';\nimport data from '../data/leetCode.json'\n\nexport const getLeetCodeData = () => {\n  return function (dispatch: Dispatch<LeetCodeActionType>) {\n      console.log(data)\n      dispatch(getLeetCodeDataAction(data))\n    return data;\n    // const POST_URL = 'https://leetcode.com/api/problems/algorithms/';\n    // fetch(POST_URL, {\n    //   method: 'GET'\n    // })\n    //   .then(res => res.json())\n    //   .then(data => {\n    //     console.log(\"This is the data....\")\n    //     console.log(data)\n    //     dispatch(getLeetCodeDataAction(data));\n    //     return data;\n    //   });\n  };\n};","import { GET_LEET_CODE_DATA, LeetCodeActionType } from '../types/LeetCodeTypes';\nimport { LeetCode } from '../interfaces/LeetCode';\n\nexport const getLeetCodeDataAction = (leetCodeData: LeetCode): LeetCodeActionType => {\n  return {\n    type: GET_LEET_CODE_DATA,\n    payload: leetCodeData\n  };\n};","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getLeetCodeData } from '../effects/LeetCodeEffects';\nimport { AppState } from '../store';\nimport { Doughnut } from 'react-chartjs-2';\n\n\nconst LeetCodeGraph = () => {\n    const dispatch = useDispatch();\n    let qnsDataSet: Array<Number> = []\n    let qnsDataColor: Array<String> = []\n    \n    let chartData: any = []\n    const [chartHaveData, setChartHaveData] = useState(false)\n    const leetCodeData = useSelector((state: AppState) => state.leetCodeData);\n\n    useEffect(() => {\n        dispatch(getLeetCodeData());\n    }, [dispatch]);\n    qnsDataColor = ['easy', 'medium', 'hard']\n    qnsDataSet = [leetCodeData.leetCodeData.easyQns, leetCodeData.leetCodeData.medQns, leetCodeData.leetCodeData.hardQns]\n    chartData = {\n        labels: qnsDataColor,\n        datasets: [{\n            label: 'Question Difficulty',\n            data: qnsDataSet,\n            backgroundColor: [\n                '#B21F00',\n                '#C9DE00',\n                '#2FDE00'\n                ]\n        }]\n    }\n    \n    return(\n        <div>\n            <Doughnut data={chartData} options={{\n                title:{\n                    display:true,\n                    text:'Leet Code questions done',\n                    fontSize:20\n                }\n            }}/>\n        </div>\n    )\n}\n\nexport default LeetCodeGraph","import React from 'react';\nimport styled from 'styled-components'\n\nconst summary = [\n    {\n        desc: \"Leadership\",\n        currentLevel: 40\n    },\n    {\n        desc: \"Fast Learner\",\n        currentLevel: 80\n    },\n    {\n        desc: \"Git, Jenkins, MongoDB\",\n        currentLevel: 40\n    },\n    {\n        desc: \"React, Typescript, JavaSCript, Python, Html, CSS\",\n        currentLevel: 60\n    },\n    {\n        desc: \"MySQL\",\n        currentLevel: 50\n    }\n]\n\nconst SummaryContent = () => {\n    return(\n        <SummaryContainerWrapper>\n                {\n                    summary.map((k :any) => {\n                        return(\n                            <SummaryContentContainer key={k.desc}>\n                                <Summary >{k.desc}</Summary>\n                                <SummaryBar currentLevel={k.currentLevel}>{k.currentLevel}%</SummaryBar>\n                            </SummaryContentContainer>\n                        )\n                    })\n                }\n            \n            \n        </SummaryContainerWrapper>\n    )\n}\n\nconst SummaryContainerWrapper = styled.div``;\nconst SummaryContentContainer = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    padding: 10px 0 10px 0;\n`;\nconst Summary = styled.div``;\n\n\nconst SummaryBar = styled.div<{currentLevel: number}>`\n    width: 50%;\n    border: 2px solid;\n    border-radius: 25px;\n    text-align: center;\n    background: linear-gradient(to right, lightgreen ${(props) => props.currentLevel}%, gray 0);\n`;\n\nexport default SummaryContent","import React from 'react';\nimport styled from 'styled-components'\nimport SummaryContent from './SummaryContent';\n\ntype ExperienceContentProps = {\n    title: string\n}\nconst jobScope = [\n    {\n        roleTitle: 'Standard Chartered Bank - Changi Business Park, Singapore',\n        rolePos: 'Software Developer',\n        date: 'Mar 2020 - Present',\n        jobDesc: [\"Used Flask and React to develop an internal application to help engineers in the bank navigate their carrer\", \"Develop wealth lending dash board using TypeScript and React to help hundereds of RMs to sell wealth lending products easily\"]\n    },\n    {\n        roleTitle: 'Standard Chartered Bank - Changi Business Park, Singapore ',\n        rolePos: 'Associate Software Developer',\n        date: 'Aug 2018 - Mar 2020',\n        jobDesc: [\"Develop client facing application using EMberJS which is used by thousands of SCB's Singapore Clients\", \"Develop internal facing application for Bank's Management Team to track hundreds of team's KPI using Kafka and Java\", \n        \"Displaying the data set from Kafka's topic using Grafana\",\"Used Typescript and react to develop existing internal portal\", \"Collaboration done using Confluence, Jira and Bitbucket\", \"Develop wealth lending simulator using Typescript and React to help make lending simulation easier for thousands of SCB's clients and RMs\",\n        \"Used PHP and content management system (CMS) to allow faster deployment of projects\"]\n    },\n    {\n        roleTitle: 'Stratio | LinkSquare | BeyondSense - San Jose, Silicon Valley',\n        rolePos: 'Full Stack Developer - Intern',\n        date: 'Jan 2018 - Jul 2018',\n        jobDesc: [\"Developed new back-end logic to existing web applcaition using Django to cater to the growing amount of end-users\", \n        \"Improved user experience to existing web application using JavaScript and HTML\", \"Added new design and model to existing database\",\n        \"CRUD data with MySQL\", \"Integrated website with Stripe API to ease payment\", \"Designed different webhooks to cater to different events from Stripe\",\n        \"Used Python Cron to automate script\", \"Documentations\", \"Improved part of company's existing pitch deck\"]\n    },\n    {\n        roleTitle: 'Standard Chartered Bank - Changi Business Park, Singapore  ',\n        rolePos: 'Retail Bank ITO Intern',\n        date: 'May 2017 - Aug 2017',\n        jobDesc: [\"Develop internal application for bank using Java and Javascript\", \"Design database for internal application\",\n        \"Write documentations for codes\", \"Involved in sprint planning and discussions with product owners, scrum masters and business owners\",\n        \"Write automated test cases with Cucumber and Ruby\", \"Update sprint backlogs, sprint stories, user points, etc\"]\n    },\n    {\n        roleTitle: 'CrossTrack Pte Ltd - Jalan Rajah, Singapore',\n        rolePos: 'IT Developer Intern',\n        date: 'Jun 2016 - Aug 2016',\n        jobDesc: [\"Debug existing software\", \"Added new functions to existing software using Python\", \"Handle database updates\", \"Update server after bug fixes\",\n        \"Liaised with overseas developer to ensure work is done using Slack\", \"Documentations\"]\n    }\n\n]\n\nconst educationScope = [\n    {\n        schoolName: 'Nanyang Techonological University',\n        date: 'Jan 2014 - Jan 2018',\n        projects: [\"Studied Computer Science\", \"Used Java to develop cinema application\", \"Used Flask to develop a game to help elderly with dementia\",\n        \"Used Spring Boot to develop web application to test against OWASP database for Final Year Project\"]\n    },\n    {\n        schoolName: 'Pioneer Junior College',\n        date: 'Jan 2010 - Dec 2011',\n        projects: [\"Studied in Science stream\", \"Member of the welfare community in student council\", \"Organized events such as J1 Orientation day, Teachers' Day, Graduation Night, etc.\"]\n    }\n]\n\nconst ExperienceContent = (props: ExperienceContentProps) => {\n    return(\n        <ExperienceContentWrapper>\n            <ExperienceContentTitle>{props.title}</ExperienceContentTitle>\n            {props.title === \"EXPERIENCE\" ?\n                jobScope.map((k: any) => {\n                    return(\n                        <ExperienceContentContainer key={k.roleTitle}>\n                            <ExperienceContentRolesTitle>\n                                {k.roleTitle}\n                            </ExperienceContentRolesTitle>\n                            <ExperienceContentRolesPosContainer>\n                                <ExperienceContentRolesPos>{k.rolePos}</ExperienceContentRolesPos>\n                                <ExperienceContentDate>{k.date}</ExperienceContentDate>\n                            </ExperienceContentRolesPosContainer>\n                            <ExperienceContentUL>\n                                {k.jobDesc.map((v: any) => {\n                                    return(\n                                        <li key={v}>{v}</li>\n                                    )\n                                })}\n                                </ExperienceContentUL>\n                        </ExperienceContentContainer>\n                    )\n                })\n            : props.title === \"EDUCATION\" ?\n            educationScope.map((k: any) => {\n                return(\n                    <ExperienceContentContainer key={k.schoolName}>\n                        <ExperienceContentRolesPosContainer>\n                            <ExperienceContentRolesPos>{k.schoolName}</ExperienceContentRolesPos>\n                            <ExperienceContentDate>{k.date}</ExperienceContentDate>\n                        </ExperienceContentRolesPosContainer>\n                        <ExperienceContentUL>\n                            {k.projects.map((v: any) => {\n                                return(\n                                    <li key={v}>{v}</li>\n                                )\n                            })}\n                            </ExperienceContentUL>\n                    </ExperienceContentContainer>\n                )\n            }) :\n                props.title === \"SUMMARY\" ? <SummaryContent /> : \"\"\n            }\n        </ExperienceContentWrapper>\n    )\n}\nconst ExperienceContentUL = styled.ul``\nconst ExperienceContentWrapper = styled.div``;\nconst ExperienceContentTitle = styled.div`\n    font-weight: bold;\n`\nconst ExperienceContentContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n`\nconst ExperienceContentRolesPos = styled.div``\nconst ExperienceContentRolesPosContainer = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n`\nconst ExperienceContentDate = styled.div`\n    padding: 0 0 0 150px;\n`\nconst ExperienceContentRolesTitle = styled.div``\n\n\nexport default ExperienceContent","export default __webpack_public_path__ + \"static/media/go.4c88fbf9.svg\";","import React from 'react';\nimport styled from 'styled-components'\nimport Go from '../assets/go.svg'\nimport JavaScript from '../assets/javascript.svg'\nimport TypeScript from '../assets/typescript.svg'\nimport Python from '../assets/python.svg'\nimport Java from '../assets/java.svg'\nimport Html from '../assets/html5.svg'\n\nconst skills = [\n    {\n        'name': 'JavaScript',\n        'img': JavaScript\n    },\n    {\n        'name': 'TypeScript',\n        'img': TypeScript\n    },\n    {\n        'name': 'Python',\n        'img': Python\n    },\n    {\n        'name': 'Java',\n        'img': Java\n    },\n    {\n        'name': 'Go',\n        'img': Go\n    },\n    {\n        'name': 'HTML',\n        'img': Html\n    }\n]\n\nconst SkillsList = () => {\n    return(\n        <SkillListContainer>\n            <SkillListTitle>Skill List</SkillListTitle>\n            <SkillListWrapper>\n            {\n                skills.map((k: any) => {\n                    return(\n                        <SkillWrapper key={k.name}>\n                            <div className=\"imageBox\">\n                                <SkillWrapperImg src={k.img} alt=\"hi\"></SkillWrapperImg>\n                            </div>\n                            <SkillWrapperText>{k.name}</SkillWrapperText>\n                        </SkillWrapper>\n                    )\n                })\n            }\n            </SkillListWrapper>\n        </SkillListContainer>\n    )\n}\nconst SkillWrapperImg = styled.img`\n    width: 50px;\n    height: 50px;\n`\nconst SkillWrapperText = styled.span``\n\nconst SkillWrapper = styled.div`\n    width: 25%;\n    height: 25%;\n    display: flex;\n    flex-direction: column;\n    padding: 15px;\n    border-radius: 5px;\n    box-shadow: 0 5px 15px 0 rgba(0,0,0,0.1);\n    text-align: center;\n    margin: 0 15px 15px 0;\n    .imageBox {\n        align-items: center\n    }\n`;\nconst SkillListWrapper = styled.div`\n    display: flex;\n    flex-wrap: wrap;\n    flex-direction: row;\n`\nconst SkillListTitle = styled.div`\n    width: 25%;\n    white-space: nowrap;\n    font-weight: bold;\n`\nconst SkillListContainer = styled.div``\n\nexport default SkillsList","export default __webpack_public_path__ + \"static/media/javascript.ba40d6a9.svg\";","export default __webpack_public_path__ + \"static/media/typescript.a6305a73.svg\";","export default __webpack_public_path__ + \"static/media/python.e6d7dc73.svg\";","export default __webpack_public_path__ + \"static/media/java.a351f739.svg\";","export default __webpack_public_path__ + \"static/media/html5.3efc40a5.svg\";","import React from 'react';\nimport styled from 'styled-components'\nimport PersonalProfileContent from './components/PersonalProfileContent'\nimport GitHubGraph from './components/GitHubGraph'\nimport LeetCodeGraph from './components/LeetCodeGraph'\nimport ExperienceContent from './components/ExperienceContent'\nimport SkillsList from './components/SkillsList'\nimport './App.css';\n\nfunction App() {\n  return (\n    <MainPage>\n      <LeftContainer>\n        <GitHubGraph></GitHubGraph>\n        <LeetCodeGraph></LeetCodeGraph>\n      </LeftContainer>\n      <RightContainer>\n        <PersonalProfileContent></PersonalProfileContent>\n        <ContainerBreaker />\n        <ExperienceContent title={\"EXPERIENCE\"}></ExperienceContent>\n        <ContainerBreaker/>\n        <ExperienceContent title={\"EDUCATION\"}></ExperienceContent>\n        <ContainerBreaker/>\n        <SkillsList></SkillsList>\n        <ContainerBreaker />\n        <ExperienceContent title={\"SUMMARY\"}></ExperienceContent>\n      </RightContainer>\n    </MainPage>\n  );\n}\n\nconst ContainerBreaker = styled.hr`\n  border-color: orange;\n`\n\nconst MainPage = styled.div`\n  display: flex;\n  flex-direction: row;\n`\nconst LeftContainer = styled.div`\n  display: none;\n  width: 25%;\n  @media(min-width: 1024px) {\n    display: flex;\n    flex-direction: column;\n  }\n`\n\n\nconst RightContainer = styled.div`\n  padding: 0 0 0 15px;\n  @media(min-width: 1024px) {\n    width: 50%;\n  }\n`\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import {\n    GET_LEET_CODE_DATA,\n    GetLeetCodeStateType,\n    LeetCodeActionType\n  } from '../types/LeetCodeTypes';\n  import { LeetCode } from '../interfaces/LeetCode'\n  \n  const initialStateGetLeetCodeData: GetLeetCodeStateType = {\n    leetCodeData: {\n        numSolved: 0,\n        easyQns: 0,\n        medQns: 0,\n        hardQns: 0\n    }\n  };\n  \n  export const getLeetCodeReducer = (\n    state = initialStateGetLeetCodeData,\n    action: LeetCodeActionType\n  ): GetLeetCodeStateType => {\n    switch (action.type) {\n      case GET_LEET_CODE_DATA:\n        return {\n          ...state,\n          leetCodeData: action.payload\n        };\n      default:\n        return state;\n    }\n  };","import {\n    GET_GIT_HUB_DATA,\n    GetGitHubStateType,\n    GitHubActionType\n  } from '../types/GitHubTypes';\n\n  \n  const initialStateGetGitHubData: GetGitHubStateType = {\n    gitHubData: [],\n    isLoading: true,\n  };\n  \n  export const getGitHubReducer = (\n    state = initialStateGetGitHubData,\n    action: GitHubActionType\n  ): GetGitHubStateType => {\n    switch (action.type) {\n      case GET_GIT_HUB_DATA:\n          let langaugeMap: any = {}\n          action.payload.map((k: any) => {\n              if(k.language){\n                if (langaugeMap[k.language]){\n                    langaugeMap[k.language] +=1\n                } else{\n                    langaugeMap[k.language] = 1\n                }\n              }\n          })\n          console.log(\"this the language map...\")\n          console.log(langaugeMap)\n        return {\n          ...state,\n          isLoading: false,\n          gitHubData: langaugeMap\n        };\n      default:\n        return state;\n    }\n  };","import { combineReducers } from 'redux';\nimport { getLeetCodeReducer } from './LeetCodeReducer';\nimport { getGitHubReducer } from './GitHubReducer';\n\nconst rootReducer = combineReducers({\n  leetCodeData: getLeetCodeReducer,\n  gitHubData: getGitHubReducer\n});\n\nexport default rootReducer;","import { createStore, applyMiddleware } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport rootReducer from '../reducer'\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunkMiddleware))\n);\n\nexport type AppState = ReturnType<typeof rootReducer>;\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}